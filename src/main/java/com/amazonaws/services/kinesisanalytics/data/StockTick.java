/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.kinesisanalytics.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockTick extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8312684477138101687L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTick\",\"namespace\":\"com.amazonaws.services.kinesisanalytics.data\",\"fields\":[{\"name\":\"isin\",\"type\":\"string\"},{\"name\":\"timeStamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"bid\",\"type\":\"double\"},{\"name\":\"ask\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<StockTick> ENCODER =
      new BinaryMessageEncoder<StockTick>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTick> DECODER =
      new BinaryMessageDecoder<StockTick>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockTick> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockTick> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockTick> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockTick>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockTick to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockTick from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockTick instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockTick fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence isin;
   private java.time.Instant timeStamp;
   private double bid;
   private double ask;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTick() {}

  /**
   * All-args constructor.
   * @param isin The new value for isin
   * @param timeStamp The new value for timeStamp
   * @param bid The new value for bid
   * @param ask The new value for ask
   */
  public StockTick(java.lang.CharSequence isin, java.time.Instant timeStamp, java.lang.Double bid, java.lang.Double ask) {
    this.isin = isin;
    this.timeStamp = timeStamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.bid = bid;
    this.ask = ask;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return isin;
    case 1: return timeStamp;
    case 2: return bid;
    case 3: return ask;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: isin = (java.lang.CharSequence)value$; break;
    case 1: timeStamp = (java.time.Instant)value$; break;
    case 2: bid = (java.lang.Double)value$; break;
    case 3: ask = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'isin' field.
   * @return The value of the 'isin' field.
   */
  public java.lang.CharSequence getIsin() {
    return isin;
  }


  /**
   * Sets the value of the 'isin' field.
   * @param value the value to set.
   */
  public void setIsin(java.lang.CharSequence value) {
    this.isin = value;
  }

  /**
   * Gets the value of the 'timeStamp' field.
   * @return The value of the 'timeStamp' field.
   */
  public java.time.Instant getTimeStamp() {
    return timeStamp;
  }


  /**
   * Sets the value of the 'timeStamp' field.
   * @param value the value to set.
   */
  public void setTimeStamp(java.time.Instant value) {
    this.timeStamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'bid' field.
   * @return The value of the 'bid' field.
   */
  public double getBid() {
    return bid;
  }


  /**
   * Sets the value of the 'bid' field.
   * @param value the value to set.
   */
  public void setBid(double value) {
    this.bid = value;
  }

  /**
   * Gets the value of the 'ask' field.
   * @return The value of the 'ask' field.
   */
  public double getAsk() {
    return ask;
  }


  /**
   * Sets the value of the 'ask' field.
   * @param value the value to set.
   */
  public void setAsk(double value) {
    this.ask = value;
  }

  /**
   * Creates a new StockTick RecordBuilder.
   * @return A new StockTick RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.data.StockTick.Builder newBuilder() {
    return new com.amazonaws.services.kinesisanalytics.data.StockTick.Builder();
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTick RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.data.StockTick.Builder newBuilder(com.amazonaws.services.kinesisanalytics.data.StockTick.Builder other) {
    if (other == null) {
      return new com.amazonaws.services.kinesisanalytics.data.StockTick.Builder();
    } else {
      return new com.amazonaws.services.kinesisanalytics.data.StockTick.Builder(other);
    }
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing StockTick instance.
   * @param other The existing instance to copy.
   * @return A new StockTick RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.data.StockTick.Builder newBuilder(com.amazonaws.services.kinesisanalytics.data.StockTick other) {
    if (other == null) {
      return new com.amazonaws.services.kinesisanalytics.data.StockTick.Builder();
    } else {
      return new com.amazonaws.services.kinesisanalytics.data.StockTick.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockTick instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTick>
    implements org.apache.avro.data.RecordBuilder<StockTick> {

    private java.lang.CharSequence isin;
    private java.time.Instant timeStamp;
    private double bid;
    private double ask;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.kinesisanalytics.data.StockTick.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isin)) {
        this.isin = data().deepCopy(fields()[0].schema(), other.isin);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[1].schema(), other.timeStamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bid)) {
        this.bid = data().deepCopy(fields()[2].schema(), other.bid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ask)) {
        this.ask = data().deepCopy(fields()[3].schema(), other.ask);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing StockTick instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.kinesisanalytics.data.StockTick other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.isin)) {
        this.isin = data().deepCopy(fields()[0].schema(), other.isin);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[1].schema(), other.timeStamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bid)) {
        this.bid = data().deepCopy(fields()[2].schema(), other.bid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ask)) {
        this.ask = data().deepCopy(fields()[3].schema(), other.ask);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'isin' field.
      * @return The value.
      */
    public java.lang.CharSequence getIsin() {
      return isin;
    }


    /**
      * Sets the value of the 'isin' field.
      * @param value The value of 'isin'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder setIsin(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.isin = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'isin' field has been set.
      * @return True if the 'isin' field has been set, false otherwise.
      */
    public boolean hasIsin() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'isin' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder clearIsin() {
      isin = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeStamp' field.
      * @return The value.
      */
    public java.time.Instant getTimeStamp() {
      return timeStamp;
    }


    /**
      * Sets the value of the 'timeStamp' field.
      * @param value The value of 'timeStamp'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder setTimeStamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timeStamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeStamp' field has been set.
      * @return True if the 'timeStamp' field has been set, false otherwise.
      */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeStamp' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder clearTimeStamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bid' field.
      * @return The value.
      */
    public double getBid() {
      return bid;
    }


    /**
      * Sets the value of the 'bid' field.
      * @param value The value of 'bid'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder setBid(double value) {
      validate(fields()[2], value);
      this.bid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bid' field has been set.
      * @return True if the 'bid' field has been set, false otherwise.
      */
    public boolean hasBid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bid' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder clearBid() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ask' field.
      * @return The value.
      */
    public double getAsk() {
      return ask;
    }


    /**
      * Sets the value of the 'ask' field.
      * @param value The value of 'ask'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder setAsk(double value) {
      validate(fields()[3], value);
      this.ask = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ask' field has been set.
      * @return True if the 'ask' field has been set, false otherwise.
      */
    public boolean hasAsk() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ask' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.StockTick.Builder clearAsk() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTick build() {
      try {
        StockTick record = new StockTick();
        record.isin = fieldSetFlags()[0] ? this.isin : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timeStamp = fieldSetFlags()[1] ? this.timeStamp : (java.time.Instant) defaultValue(fields()[1]);
        record.bid = fieldSetFlags()[2] ? this.bid : (java.lang.Double) defaultValue(fields()[2]);
        record.ask = fieldSetFlags()[3] ? this.ask : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTick>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTick>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTick>
    READER$ = (org.apache.avro.io.DatumReader<StockTick>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










