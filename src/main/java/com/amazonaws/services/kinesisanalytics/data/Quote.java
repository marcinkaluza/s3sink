/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.kinesisanalytics.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Quote extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8624479790568584455L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Quote\",\"namespace\":\"com.amazonaws.services.kinesisanalytics.data\",\"fields\":[{\"name\":\"ric\",\"type\":\"string\"},{\"name\":\"date_time\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"bid_price\",\"type\":\"double\"},{\"name\":\"ask_price\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Quote> ENCODER =
      new BinaryMessageEncoder<Quote>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Quote> DECODER =
      new BinaryMessageDecoder<Quote>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Quote> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Quote> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Quote>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Quote to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Quote from a ByteBuffer. */
  public static Quote fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ric;
  @Deprecated public org.joda.time.DateTime date_time;
  @Deprecated public double bid_price;
  @Deprecated public double ask_price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Quote() {}

  /**
   * All-args constructor.
   * @param ric The new value for ric
   * @param date_time The new value for date_time
   * @param bid_price The new value for bid_price
   * @param ask_price The new value for ask_price
   */
  public Quote(java.lang.CharSequence ric, org.joda.time.DateTime date_time, java.lang.Double bid_price, java.lang.Double ask_price) {
    this.ric = ric;
    this.date_time = date_time;
    this.bid_price = bid_price;
    this.ask_price = ask_price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ric;
    case 1: return date_time;
    case 2: return bid_price;
    case 3: return ask_price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ric = (java.lang.CharSequence)value$; break;
    case 1: date_time = (org.joda.time.DateTime)value$; break;
    case 2: bid_price = (java.lang.Double)value$; break;
    case 3: ask_price = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ric' field.
   * @return The value of the 'ric' field.
   */
  public java.lang.CharSequence getRic() {
    return ric;
  }

  /**
   * Sets the value of the 'ric' field.
   * @param value the value to set.
   */
  public void setRic(java.lang.CharSequence value) {
    this.ric = value;
  }

  /**
   * Gets the value of the 'date_time' field.
   * @return The value of the 'date_time' field.
   */
  public org.joda.time.DateTime getDateTime() {
    return date_time;
  }

  /**
   * Sets the value of the 'date_time' field.
   * @param value the value to set.
   */
  public void setDateTime(org.joda.time.DateTime value) {
    this.date_time = value;
  }

  /**
   * Gets the value of the 'bid_price' field.
   * @return The value of the 'bid_price' field.
   */
  public java.lang.Double getBidPrice() {
    return bid_price;
  }

  /**
   * Sets the value of the 'bid_price' field.
   * @param value the value to set.
   */
  public void setBidPrice(java.lang.Double value) {
    this.bid_price = value;
  }

  /**
   * Gets the value of the 'ask_price' field.
   * @return The value of the 'ask_price' field.
   */
  public java.lang.Double getAskPrice() {
    return ask_price;
  }

  /**
   * Sets the value of the 'ask_price' field.
   * @param value the value to set.
   */
  public void setAskPrice(java.lang.Double value) {
    this.ask_price = value;
  }

  /**
   * Creates a new Quote RecordBuilder.
   * @return A new Quote RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.data.Quote.Builder newBuilder() {
    return new com.amazonaws.services.kinesisanalytics.data.Quote.Builder();
  }

  /**
   * Creates a new Quote RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Quote RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.data.Quote.Builder newBuilder(com.amazonaws.services.kinesisanalytics.data.Quote.Builder other) {
    return new com.amazonaws.services.kinesisanalytics.data.Quote.Builder(other);
  }

  /**
   * Creates a new Quote RecordBuilder by copying an existing Quote instance.
   * @param other The existing instance to copy.
   * @return A new Quote RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.data.Quote.Builder newBuilder(com.amazonaws.services.kinesisanalytics.data.Quote other) {
    return new com.amazonaws.services.kinesisanalytics.data.Quote.Builder(other);
  }

  /**
   * RecordBuilder for Quote instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Quote>
    implements org.apache.avro.data.RecordBuilder<Quote> {

    private java.lang.CharSequence ric;
    private org.joda.time.DateTime date_time;
    private double bid_price;
    private double ask_price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.kinesisanalytics.data.Quote.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ric)) {
        this.ric = data().deepCopy(fields()[0].schema(), other.ric);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date_time)) {
        this.date_time = data().deepCopy(fields()[1].schema(), other.date_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bid_price)) {
        this.bid_price = data().deepCopy(fields()[2].schema(), other.bid_price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ask_price)) {
        this.ask_price = data().deepCopy(fields()[3].schema(), other.ask_price);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Quote instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.kinesisanalytics.data.Quote other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ric)) {
        this.ric = data().deepCopy(fields()[0].schema(), other.ric);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date_time)) {
        this.date_time = data().deepCopy(fields()[1].schema(), other.date_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bid_price)) {
        this.bid_price = data().deepCopy(fields()[2].schema(), other.bid_price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ask_price)) {
        this.ask_price = data().deepCopy(fields()[3].schema(), other.ask_price);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ric' field.
      * @return The value.
      */
    public java.lang.CharSequence getRic() {
      return ric;
    }

    /**
      * Sets the value of the 'ric' field.
      * @param value The value of 'ric'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder setRic(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ric = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ric' field has been set.
      * @return True if the 'ric' field has been set, false otherwise.
      */
    public boolean hasRic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ric' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder clearRic() {
      ric = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date_time' field.
      * @return The value.
      */
    public org.joda.time.DateTime getDateTime() {
      return date_time;
    }

    /**
      * Sets the value of the 'date_time' field.
      * @param value The value of 'date_time'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder setDateTime(org.joda.time.DateTime value) {
      validate(fields()[1], value);
      this.date_time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date_time' field has been set.
      * @return True if the 'date_time' field has been set, false otherwise.
      */
    public boolean hasDateTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date_time' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder clearDateTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bid_price' field.
      * @return The value.
      */
    public java.lang.Double getBidPrice() {
      return bid_price;
    }

    /**
      * Sets the value of the 'bid_price' field.
      * @param value The value of 'bid_price'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder setBidPrice(double value) {
      validate(fields()[2], value);
      this.bid_price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bid_price' field has been set.
      * @return True if the 'bid_price' field has been set, false otherwise.
      */
    public boolean hasBidPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bid_price' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder clearBidPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ask_price' field.
      * @return The value.
      */
    public java.lang.Double getAskPrice() {
      return ask_price;
    }

    /**
      * Sets the value of the 'ask_price' field.
      * @param value The value of 'ask_price'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder setAskPrice(double value) {
      validate(fields()[3], value);
      this.ask_price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ask_price' field has been set.
      * @return True if the 'ask_price' field has been set, false otherwise.
      */
    public boolean hasAskPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ask_price' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.data.Quote.Builder clearAskPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Quote build() {
      try {
        Quote record = new Quote();
        record.ric = fieldSetFlags()[0] ? this.ric : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.date_time = fieldSetFlags()[1] ? this.date_time : (org.joda.time.DateTime) defaultValue(fields()[1], record.getConversion(1));
        record.bid_price = fieldSetFlags()[2] ? this.bid_price : (java.lang.Double) defaultValue(fields()[2], record.getConversion(2));
        record.ask_price = fieldSetFlags()[3] ? this.ask_price : (java.lang.Double) defaultValue(fields()[3], record.getConversion(3));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Quote>
    WRITER$ = (org.apache.avro.io.DatumWriter<Quote>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Quote>
    READER$ = (org.apache.avro.io.DatumReader<Quote>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
